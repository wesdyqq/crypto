import sys
import subprocess

def install_packages():
    print("\033[33m[-] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...\033[0m")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "reqs.txt"])
        print("\033[32m[+] –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\033[0m")
        print("\033[34m[!] –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.\033[0m")
    except subprocess.CalledProcessError as e:
        print(f"\033[31m[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}\033[0m]")
        sys.exit(1)
    sys.exit(0)

try:
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import pad, unpad
    from Crypto.Random import get_random_bytes
    from Crypto.Protocol.KDF import PBKDF2
    import os
    import base64
    import hashlib
except ImportError:
    print("\033[31m[!] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\033[0m")
    install_packages()
def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
    os.system('cls' if os.name == 'nt' else 'clear')

def show_header():
    """–í—ã–≤–æ–¥–∏—Ç ASCII-–∞—Ä—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    header = r"""
    by  ‚ñà     ‚ñà‚ñë‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì
        ‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñë‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà    ‚ñí ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí
        ‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñí‚ñà‚ñà‚ñà   ‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñë‚ñà‚ñà   ‚ñà‚ñå ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë
        ‚ñë‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ   ‚ñí   ‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà‚ñÑ   ‚ñå ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë
        ‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì  ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë
        ‚ñë ‚ñì‚ñë‚ñí ‚ñí  ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë ‚ñí‚ñí‚ñì  ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñí 
          ‚ñí ‚ñë ‚ñë   ‚ñë ‚ñë  ‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñí ‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë 
          ‚ñë   ‚ñë     ‚ñë   ‚ñë  ‚ñë  ‚ñë   ‚ñë ‚ñë  ‚ñë ‚ñí ‚ñí ‚ñë‚ñë  
            ‚ñë       ‚ñë  ‚ñë      ‚ñë     ‚ñë    ‚ñë ‚ñë     
                                  ‚ñë      ‚ñë ‚ñë     
    """
    print("\033[36m" + header + "\033[0m")  # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
    print("{:^40}".format("üîí –®–ò–§–†–ê–¢–û–† 3000 | AES-256-CBC üîì"))
    print("-" * 40)

def get_key(password: str, salt: bytes) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á 32 –±–∞–π—Ç–∞ (AES-256) –∏–∑ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–ª–∏"""
    return PBKDF2(password.encode(), salt, dkLen=32, count=1000000, 
                 prf=lambda p, s: hashlib.sha256(p + s).digest())

def encrypt(plaintext: str, password: str) -> str:
    """–®–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'salt:iv:ciphertext'"""
    salt = get_random_bytes(16)
    iv = get_random_bytes(16)
    key = get_key(password, salt)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(plaintext.encode(), AES.block_size))
    return f"{base64.b64encode(salt).decode()}:{base64.b64encode(iv).decode()}:{base64.b64encode(ciphertext).decode()}"

def decrypt(encrypted: str, password: str) -> str:
    """–î–µ—à–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ 'salt:iv:ciphertext'"""
    try:
        salt_b64, iv_b64, ciphertext_b64 = encrypted.split(":")
        salt = base64.b64decode(salt_b64)
        iv = base64.b64decode(iv_b64)
        ciphertext = base64.b64decode(ciphertext_b64)
        key = get_key(password, salt)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return plaintext.decode()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def main():
    while True:
        clear_screen()
        show_header()
        
        print("\n{:<20} {:<50}".format("1Ô∏è‚É£", "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"))
        print("{:<20} {:<50}".format("2Ô∏è‚É£", "–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"))
        print("{:<20} {:<50}".format("0Ô∏è‚É£", "–í—ã—Ö–æ–¥"))
        
        choice = input("\n>>> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1/2/0): ")
        
        if choice == "1":
            clear_screen()
            show_header()
            print("\nüîê –®–ò–§–†–û–í–ê–ù–ò–ï")
            print("-" * 20)
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ")
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            encrypted = encrypt(text, password)
            print("\n" + "=" * 20)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ!\n")
            print("üîë –†–µ–∑—É–ª—å—Ç–∞—Ç (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ):")
            print("\033[33m" + encrypted + "\033[0m")  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            
        elif choice == "2":
            clear_screen()
            show_header()
            print("\nüîì –î–ï–®–ò–§–†–û–í–ê–ù–ò–ï")
            print("-" * 20)
            encrypted = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (salt:iv:ciphertext): ")
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            decrypted = decrypt(encrypted, password)
            print("\n" + "=" * 20)
            if decrypted.startswith("–û—à–∏–±–∫–∞"):
                print("\033[31m" + decrypted + "\033[0m")  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
            else:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ!\n")
                print("üìú –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                print("\033[32m" + decrypted + "\033[0m")  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            
        elif choice == "0":
            clear_screen()
            print("\n" + "=" * 20)
            print("{:^20}".format("üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."))
            print("{:^20}".format("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"))
            print("=" * 20 + "\n")
            break
            
        else:
            print("\033[31m\n‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\033[0m")
            input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)